generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model doctor_students {
  doctor_id  String   @db.Uuid
  student_id String   @db.Uuid
  doctors    doctors  @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  students   students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([doctor_id, student_id])
}

model doctors {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar
  email           String?           @unique @db.VarChar
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  doctor_students doctor_students[]
  tasks           tasks[]
}

model students {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  unique_id       String            @db.VarChar @default(dbgenerated("gen_student_id()"))
  name            String            @db.VarChar
  email           String?           @db.VarChar
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  doctor_students doctor_students[]
  tasks           tasks[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tasks {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar
  description String?
  status      String   @default("pending") @db.VarChar
  doctor_id   String   @db.Uuid
  student_id  String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  doctors     doctors  @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  students    students @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
